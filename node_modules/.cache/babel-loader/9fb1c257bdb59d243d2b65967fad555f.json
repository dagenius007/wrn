{"ast":null,"code":"import \"antd/es/notification/style\";\nimport _notification from \"antd/es/notification\";\nimport { all, takeEvery, put, call } from 'redux-saga/effects';\nimport { login, currentAccount, logout } from 'services/user';\nimport actions from './actions';\nexport function* LOGIN({\n  payload\n}) {\n  const email = payload.email,\n        password = payload.password;\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      loading: true\n    }\n  });\n  const success = yield call(login, email, password);\n\n  if (success) {\n    _notification.success({\n      message: 'Logged In',\n      description: 'You have successfully logged in to Clean UI React Admin Template!'\n    });\n\n    yield put({\n      type: 'user/LOAD_CURRENT_ACCOUNT'\n    });\n  }\n}\nexport function* LOAD_CURRENT_ACCOUNT() {\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      loading: true\n    }\n  });\n  const response = yield call(currentAccount);\n\n  if (response) {\n    const id = response.uid,\n          email = response.email,\n          avatar = response.photoURL;\n    yield put({\n      type: 'user/SET_STATE',\n      payload: {\n        id,\n        name: 'Administrator',\n        email,\n        avatar,\n        role: 'admin',\n        authorized: true\n      }\n    });\n  }\n\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      loading: false\n    }\n  });\n}\nexport function* LOGOUT() {\n  yield call(logout);\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      id: '',\n      name: '',\n      role: '',\n      email: '',\n      avatar: '',\n      authorized: false,\n      loading: false\n    }\n  });\n}\nexport default function* rootSaga() {\n  yield all([takeEvery(actions.LOGIN, LOGIN), takeEvery(actions.LOAD_CURRENT_ACCOUNT, LOAD_CURRENT_ACCOUNT), takeEvery(actions.LOGOUT, LOGOUT), LOAD_CURRENT_ACCOUNT() // run once on app load to check user auth\n  ]);\n}","map":{"version":3,"sources":["/Users/joshuaoluikpe/Documents/personal/wrn/src/redux/user/sagas.js"],"names":["all","takeEvery","put","call","login","currentAccount","logout","actions","LOGIN","payload","email","password","type","loading","success","message","description","LOAD_CURRENT_ACCOUNT","response","id","uid","avatar","photoURL","name","role","authorized","LOGOUT","rootSaga"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,IAA9B,QAA0C,oBAA1C;AAEA,SAASC,KAAT,EAAgBC,cAAhB,EAAgCC,MAAhC,QAA8C,eAA9C;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,UAAUC,KAAV,CAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAA6B;AAAA,QAC1BC,KAD0B,GACND,OADM,CAC1BC,KAD0B;AAAA,QACnBC,QADmB,GACNF,OADM,CACnBE,QADmB;AAElC,QAAMT,GAAG,CAAC;AACRU,IAAAA,IAAI,EAAE,gBADE;AAERH,IAAAA,OAAO,EAAE;AACPI,MAAAA,OAAO,EAAE;AADF;AAFD,GAAD,CAAT;AAMA,QAAMC,OAAO,GAAG,MAAMX,IAAI,CAACC,KAAD,EAAQM,KAAR,EAAeC,QAAf,CAA1B;;AACA,MAAIG,OAAJ,EAAa;AACX,kBAAaA,OAAb,CAAqB;AACnBC,MAAAA,OAAO,EAAE,WADU;AAEnBC,MAAAA,WAAW,EAAE;AAFM,KAArB;;AAIA,UAAMd,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAE;AADE,KAAD,CAAT;AAGD;AACF;AAED,OAAO,UAAUK,oBAAV,GAAiC;AACtC,QAAMf,GAAG,CAAC;AACRU,IAAAA,IAAI,EAAE,gBADE;AAERH,IAAAA,OAAO,EAAE;AACPI,MAAAA,OAAO,EAAE;AADF;AAFD,GAAD,CAAT;AAMA,QAAMK,QAAQ,GAAG,MAAMf,IAAI,CAACE,cAAD,CAA3B;;AACA,MAAIa,QAAJ,EAAc;AAAA,UACCC,EADD,GACiCD,QADjC,CACJE,GADI;AAAA,UACKV,KADL,GACiCQ,QADjC,CACKR,KADL;AAAA,UACsBW,MADtB,GACiCH,QADjC,CACYI,QADZ;AAEZ,UAAMpB,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAE,gBADE;AAERH,MAAAA,OAAO,EAAE;AACPU,QAAAA,EADO;AAEPI,QAAAA,IAAI,EAAE,eAFC;AAGPb,QAAAA,KAHO;AAIPW,QAAAA,MAJO;AAKPG,QAAAA,IAAI,EAAE,OALC;AAMPC,QAAAA,UAAU,EAAE;AANL;AAFD,KAAD,CAAT;AAWD;;AACD,QAAMvB,GAAG,CAAC;AACRU,IAAAA,IAAI,EAAE,gBADE;AAERH,IAAAA,OAAO,EAAE;AACPI,MAAAA,OAAO,EAAE;AADF;AAFD,GAAD,CAAT;AAMD;AAED,OAAO,UAAUa,MAAV,GAAmB;AACxB,QAAMvB,IAAI,CAACG,MAAD,CAAV;AACA,QAAMJ,GAAG,CAAC;AACRU,IAAAA,IAAI,EAAE,gBADE;AAERH,IAAAA,OAAO,EAAE;AACPU,MAAAA,EAAE,EAAE,EADG;AAEPI,MAAAA,IAAI,EAAE,EAFC;AAGPC,MAAAA,IAAI,EAAE,EAHC;AAIPd,MAAAA,KAAK,EAAE,EAJA;AAKPW,MAAAA,MAAM,EAAE,EALD;AAMPI,MAAAA,UAAU,EAAE,KANL;AAOPZ,MAAAA,OAAO,EAAE;AAPF;AAFD,GAAD,CAAT;AAYD;AAED,eAAe,UAAUc,QAAV,GAAqB;AAClC,QAAM3B,GAAG,CAAC,CACRC,SAAS,CAACM,OAAO,CAACC,KAAT,EAAgBA,KAAhB,CADD,EAERP,SAAS,CAACM,OAAO,CAACU,oBAAT,EAA+BA,oBAA/B,CAFD,EAGRhB,SAAS,CAACM,OAAO,CAACmB,MAAT,EAAiBA,MAAjB,CAHD,EAIRT,oBAAoB,EAJZ,CAIgB;AAJhB,GAAD,CAAT;AAMD","sourcesContent":["import { all, takeEvery, put, call } from 'redux-saga/effects'\nimport { notification } from 'antd'\nimport { login, currentAccount, logout } from 'services/user'\nimport actions from './actions'\n\nexport function* LOGIN({ payload }) {\n  const { email, password } = payload\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      loading: true,\n    },\n  })\n  const success = yield call(login, email, password)\n  if (success) {\n    notification.success({\n      message: 'Logged In',\n      description: 'You have successfully logged in to Clean UI React Admin Template!',\n    })\n    yield put({\n      type: 'user/LOAD_CURRENT_ACCOUNT',\n    })\n  }\n}\n\nexport function* LOAD_CURRENT_ACCOUNT() {\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      loading: true,\n    },\n  })\n  const response = yield call(currentAccount)\n  if (response) {\n    const { uid: id, email, photoURL: avatar } = response\n    yield put({\n      type: 'user/SET_STATE',\n      payload: {\n        id,\n        name: 'Administrator',\n        email,\n        avatar,\n        role: 'admin',\n        authorized: true,\n      },\n    })\n  }\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      loading: false,\n    },\n  })\n}\n\nexport function* LOGOUT() {\n  yield call(logout)\n  yield put({\n    type: 'user/SET_STATE',\n    payload: {\n      id: '',\n      name: '',\n      role: '',\n      email: '',\n      avatar: '',\n      authorized: false,\n      loading: false,\n    },\n  })\n}\n\nexport default function* rootSaga() {\n  yield all([\n    takeEvery(actions.LOGIN, LOGIN),\n    takeEvery(actions.LOAD_CURRENT_ACCOUNT, LOAD_CURRENT_ACCOUNT),\n    takeEvery(actions.LOGOUT, LOGOUT),\n    LOAD_CURRENT_ACCOUNT(), // run once on app load to check user auth\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}