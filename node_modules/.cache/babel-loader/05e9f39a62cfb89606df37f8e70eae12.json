{"ast":null,"code":"var _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/Users/joshuaoluikpe/Documents/personal/wrn/src/layouts/index.js\";\n\nimport React, { Fragment } from 'react';\nimport { withRouter, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport NProgress from 'nprogress';\nimport { Helmet } from 'react-helmet';\nimport Loader from 'components/LayoutComponents/Loader';\nimport PublicLayout from './Public';\nimport LoginLayout from './Login';\nimport MainLayout from './Main';\nconst Layouts = {\n  public: PublicLayout,\n  login: LoginLayout,\n  main: MainLayout\n};\nlet IndexLayout = (_dec = connect(({\n  user\n}) => ({\n  user\n})), withRouter(_class = _dec(_class = (_temp = class IndexLayout extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.previousPath = '';\n  }\n\n  componentDidUpdate(prevProps) {\n    const location = this.props.location;\n    const prevLocation = prevProps.prevLocation;\n\n    if (location !== prevLocation) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          children = _this$props.children,\n          _this$props$location = _this$props.location,\n          pathname = _this$props$location.pathname,\n          search = _this$props$location.search,\n          user = _this$props.user; // NProgress Management\n\n    const currentPath = pathname + search;\n\n    if (currentPath !== this.previousPath) {\n      NProgress.start();\n    }\n\n    setTimeout(() => {\n      NProgress.done();\n      this.previousPath = currentPath;\n    }, 300); // Layout Rendering\n\n    const getLayout = () => {\n      if (pathname === '/') {\n        return 'public';\n      }\n\n      if (/^\\/user(?=\\/|$)/i.test(pathname)) {\n        return 'login';\n      }\n\n      return 'main';\n    };\n\n    const Container = Layouts[getLayout()];\n    const isUserAuthorized = user.authorized;\n    const isUserLoading = user.loading;\n    const isLoginLayout = getLayout() === 'login';\n\n    const BootstrappedLayout = () => {\n      // show loader when user in check authorization process, not authorized yet and not on login pages\n      if (isUserLoading && !isUserAuthorized && !isLoginLayout) {\n        return React.createElement(Loader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        });\n      } // redirect to login page if current is not login page and user not authorized\n\n\n      if (!isLoginLayout && !isUserAuthorized) {\n        return React.createElement(Redirect, {\n          to: \"/user/login\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        });\n      } // redirect to main dashboard when user on login page and authorized\n\n\n      if (isLoginLayout && isUserAuthorized) {\n        return React.createElement(Redirect, {\n          to: \"/dashboard/alpha\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        });\n      } // in other case render previously set layout\n\n\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, children);\n    };\n\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Helmet, {\n      titleTemplate: \"Clean UI React Pro | %s\",\n      title: \" Admin Template\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), BootstrappedLayout());\n  }\n\n}, _temp)) || _class) || _class);\nexport default IndexLayout;","map":{"version":3,"sources":["/Users/joshuaoluikpe/Documents/personal/wrn/src/layouts/index.js"],"names":["React","Fragment","withRouter","Redirect","connect","NProgress","Helmet","Loader","PublicLayout","LoginLayout","MainLayout","Layouts","public","login","main","IndexLayout","user","PureComponent","previousPath","componentDidUpdate","prevProps","location","props","prevLocation","window","scrollTo","render","children","pathname","search","currentPath","start","setTimeout","done","getLayout","test","Container","isUserAuthorized","authorized","isUserLoading","loading","isLoginLayout","BootstrappedLayout"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react'\nimport { withRouter, Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport NProgress from 'nprogress'\nimport { Helmet } from 'react-helmet'\nimport Loader from 'components/LayoutComponents/Loader'\nimport PublicLayout from './Public'\nimport LoginLayout from './Login'\nimport MainLayout from './Main'\n\nconst Layouts = {\n  public: PublicLayout,\n  login: LoginLayout,\n  main: MainLayout,\n}\n\n@withRouter\n@connect(({ user }) => ({ user }))\nclass IndexLayout extends React.PureComponent {\n  previousPath = ''\n\n  componentDidUpdate(prevProps) {\n    const { location } = this.props\n    const { prevLocation } = prevProps\n    if (location !== prevLocation) {\n      window.scrollTo(0, 0)\n    }\n  }\n\n  render() {\n    const {\n      children,\n      location: { pathname, search },\n      user,\n    } = this.props\n\n    // NProgress Management\n    const currentPath = pathname + search\n    if (currentPath !== this.previousPath) {\n      NProgress.start()\n    }\n\n    setTimeout(() => {\n      NProgress.done()\n      this.previousPath = currentPath\n    }, 300)\n\n    // Layout Rendering\n    const getLayout = () => {\n      if (pathname === '/') {\n        return 'public'\n      }\n      if (/^\\/user(?=\\/|$)/i.test(pathname)) {\n        return 'login'\n      }\n      return 'main'\n    }\n\n    const Container = Layouts[getLayout()]\n    const isUserAuthorized = user.authorized\n    const isUserLoading = user.loading\n    const isLoginLayout = getLayout() === 'login'\n\n    const BootstrappedLayout = () => {\n      // show loader when user in check authorization process, not authorized yet and not on login pages\n      if (isUserLoading && !isUserAuthorized && !isLoginLayout) {\n        return <Loader />\n      }\n      // redirect to login page if current is not login page and user not authorized\n      if (!isLoginLayout && !isUserAuthorized) {\n        return <Redirect to=\"/user/login\" />\n      }\n      // redirect to main dashboard when user on login page and authorized\n      if (isLoginLayout && isUserAuthorized) {\n        return <Redirect to=\"/dashboard/alpha\" />\n      }\n      // in other case render previously set layout\n      return <Container>{children}</Container>\n    }\n\n    return (\n      <Fragment>\n        <Helmet titleTemplate=\"Clean UI React Pro | %s\" title=\" Admin Template\" />\n        {BootstrappedLayout()}\n      </Fragment>\n    )\n  }\n}\n\nexport default IndexLayout\n"]},"metadata":{},"sourceType":"module"}