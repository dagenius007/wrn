{"ast":null,"code":"import \"antd/es/checkbox/style\";\nimport _Checkbox from \"antd/es/checkbox\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nvar _jsxFileName = \"/Users/joshuaoluikpe/Documents/personal/wrn/src/pages/pages/register/RegisterForm/index.js\";\nimport React from 'react';\nconst FormItem = _Form.Item;\n\nclass RegisterFormComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      const confirmDirty = this.state.confirmDirty;\n      this.setState({\n        confirmDirty: confirmDirty || !!value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault(); // const { form } = this.props\n      // form.validateFields((err, values) => {\n      // })\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n      const confirmDirty = this.state.confirmDirty;\n\n      if (value && confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n  }\n\n  render() {\n    const form = this.props.form;\n    return React.createElement(_Form, {\n      onSubmit: this.handleSubmit,\n      className: \"login-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(FormItem, {\n      validateStatus: \"validating\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, form.getFieldDecorator('Nickname', {\n      rules: [{\n        required: true,\n        message: 'Please input your Nickname!'\n      }]\n    })(React.createElement(_Input, {\n      prefix: React.createElement(_Icon, {\n        type: \"user\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }),\n      placeholder: \"Email or Nickname\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }))), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, form.getFieldDecorator('password', {\n      rules: [{\n        required: true\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(_Input, {\n      prefix: React.createElement(_Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }),\n      type: \"password\",\n      placeholder: \"Input your password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }))), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, form.getFieldDecorator('confirm', {\n      rules: [{\n        required: true\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(_Input, {\n      type: \"password\",\n      onBlur: this.handleConfirmBlur,\n      placeholder: \"Confirm your password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"form-actions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(_Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"login-form-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Sign Up\"), React.createElement(\"span\", {\n      className: \"ml-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, form.getFieldDecorator('mailsubscription', {\n      valuePropName: 'checked',\n      initialValue: true\n    })(React.createElement(_Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Mail Subscription\")))));\n  }\n\n}\n\nconst RegisterForm = _Form.create()(RegisterFormComponent);\n\nexport default RegisterForm;","map":{"version":3,"sources":["/Users/joshuaoluikpe/Documents/personal/wrn/src/pages/pages/register/RegisterForm/index.js"],"names":["React","FormItem","Item","RegisterFormComponent","Component","state","confirmDirty","handleConfirmBlur","e","value","target","setState","handleSubmit","preventDefault","compareToFirstPassword","rule","callback","form","props","getFieldValue","validateToNextPassword","validateFields","force","render","getFieldDecorator","rules","required","message","color","validator","valuePropName","initialValue","RegisterForm","create"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Form, Input, Icon, Checkbox, Button } from 'antd'\n\nconst FormItem = Form.Item\n\nclass RegisterFormComponent extends React.Component {\n  state = {\n    confirmDirty: false,\n  }\n\n  handleConfirmBlur = e => {\n    const { value } = e.target\n    const { confirmDirty } = this.state\n    this.setState({\n      confirmDirty: confirmDirty || !!value,\n    })\n  }\n\n  handleSubmit = e => {\n    e.preventDefault()\n    // const { form } = this.props\n    // form.validateFields((err, values) => {\n    // })\n  }\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!')\n    } else {\n      callback()\n    }\n  }\n\n  validateToNextPassword = (rule, value, callback) => {\n    const { form } = this.props\n    const { confirmDirty } = this.state\n    if (value && confirmDirty) {\n      form.validateFields(['confirm'], { force: true })\n    }\n    callback()\n  }\n\n  render() {\n    const { form } = this.props\n    return (\n      <Form onSubmit={this.handleSubmit} className=\"login-form\">\n        <FormItem validateStatus=\"validating\">\n          {form.getFieldDecorator('Nickname', {\n            rules: [{ required: true, message: 'Please input your Nickname!' }],\n          })(\n            <Input\n              prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              placeholder=\"Email or Nickname\"\n            />,\n          )}\n        </FormItem>\n        <FormItem>\n          {form.getFieldDecorator('password', {\n            rules: [\n              {\n                required: true,\n              },\n              {\n                validator: this.validateToNextPassword,\n              },\n            ],\n          })(\n            <Input\n              prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              type=\"password\"\n              placeholder=\"Input your password\"\n            />,\n          )}\n        </FormItem>\n        <FormItem>\n          {form.getFieldDecorator('confirm', {\n            rules: [\n              {\n                required: true,\n              },\n              {\n                validator: this.compareToFirstPassword,\n              },\n            ],\n          })(\n            <Input\n              type=\"password\"\n              onBlur={this.handleConfirmBlur}\n              placeholder=\"Confirm your password\"\n            />,\n          )}\n        </FormItem>\n\n        <div className=\"form-actions\">\n          <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n            Sign Up\n          </Button>\n          <span className=\"ml-3\">\n            {form.getFieldDecorator('mailsubscription', {\n              valuePropName: 'checked',\n              initialValue: true,\n            })(<Checkbox>Mail Subscription</Checkbox>)}\n          </span>\n        </div>\n      </Form>\n    )\n  }\n}\n\nconst RegisterForm = Form.create()(RegisterFormComponent)\nexport default RegisterForm\n"]},"metadata":{},"sourceType":"module"}