{"ast":null,"code":"import \"antd/es/notification/style\";\nimport _notification from \"antd/es/notification\";\n\nvar _dec,\n    _class,\n    _jsxFileName = \"/Users/joshuaoluikpe/Documents/personal/wrn/src/components/LayoutComponents/Authorize/index.js\";\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nlet Authorize = (_dec = connect(({\n  user\n}) => ({\n  user\n})), _dec(_class = class Authorize extends React.Component {\n  render() {\n    const role = this.props.user.role; // current user role\n\n    const _this$props = this.props,\n          children = _this$props.children,\n          _this$props$redirect = _this$props.redirect,\n          redirect = _this$props$redirect === void 0 ? false : _this$props$redirect,\n          _this$props$to = _this$props.to,\n          to = _this$props$to === void 0 ? '/404' : _this$props$to,\n          _this$props$roles = _this$props.roles,\n          roles = _this$props$roles === void 0 ? [] : _this$props$roles;\n    const authorized = roles.includes(role);\n\n    const AuthorizedChildren = () => {\n      // if user not equal needed role and if component is a page - make redirect to needed route\n      if (!authorized && redirect) {\n        _notification.error({\n          message: 'Unauthorized Access',\n          description: 'You have no rights to access this page!'\n        });\n\n        return React.createElement(Redirect, {\n          to: to,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        });\n      } // if user not authorized return null to component\n\n\n      if (!authorized) {\n        return null;\n      } // if access is successful render children\n\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, children);\n    };\n\n    return AuthorizedChildren();\n  }\n\n}) || _class);\nexport default Authorize;","map":{"version":3,"sources":["/Users/joshuaoluikpe/Documents/personal/wrn/src/components/LayoutComponents/Authorize/index.js"],"names":["React","connect","Redirect","Authorize","user","Component","render","role","props","children","redirect","to","roles","authorized","includes","AuthorizedChildren","error","message","description"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;IAIMC,S,WADLF,OAAO,CAAC,CAAC;AAAEG,EAAAA;AAAF,CAAD,MAAe;AAAEA,EAAAA;AAAF,CAAf,CAAD,C,gBAAR,MACMD,SADN,SACwBH,KAAK,CAACK,SAD9B,CACwC;AACtCC,EAAAA,MAAM,GAAG;AAAA,UAEGC,IAFH,GAGH,KAAKC,KAHF,CAELJ,IAFK,CAEGG,IAFH,EAGQ;;AAHR,wBAIyD,KAAKC,KAJ9D;AAAA,UAICC,QAJD,eAICA,QAJD;AAAA,6CAIWC,QAJX;AAAA,UAIWA,QAJX,qCAIsB,KAJtB;AAAA,uCAI6BC,EAJ7B;AAAA,UAI6BA,EAJ7B,+BAIkC,MAJlC;AAAA,0CAI0CC,KAJ1C;AAAA,UAI0CA,KAJ1C,kCAIkD,EAJlD;AAKP,UAAMC,UAAU,GAAGD,KAAK,CAACE,QAAN,CAAeP,IAAf,CAAnB;;AACA,UAAMQ,kBAAkB,GAAG,MAAM;AAC/B;AACA,UAAI,CAACF,UAAD,IAAeH,QAAnB,EAA6B;AAC3B,sBAAaM,KAAb,CAAmB;AACjBC,UAAAA,OAAO,EAAE,qBADQ;AAEjBC,UAAAA,WAAW,EAAE;AAFI,SAAnB;;AAIA,eAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAEP,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAR8B,CAS/B;;;AACA,UAAI,CAACE,UAAL,EAAiB;AACf,eAAO,IAAP;AACD,OAZ8B,CAa/B;;;AACA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMJ,QAAN,CAAP;AACD,KAfD;;AAgBA,WAAOM,kBAAkB,EAAzB;AACD;;AAxBqC,C;AA2BxC,eAAeZ,SAAf","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport { notification } from 'antd'\n\n@connect(({ user }) => ({ user }))\nclass Authorize extends React.Component {\n  render() {\n    const {\n      user: { role },\n    } = this.props // current user role\n    const { children, redirect = false, to = '/404', roles = [] } = this.props\n    const authorized = roles.includes(role)\n    const AuthorizedChildren = () => {\n      // if user not equal needed role and if component is a page - make redirect to needed route\n      if (!authorized && redirect) {\n        notification.error({\n          message: 'Unauthorized Access',\n          description: 'You have no rights to access this page!',\n        })\n        return <Redirect to={to} />\n      }\n      // if user not authorized return null to component\n      if (!authorized) {\n        return null\n      }\n      // if access is successful render children\n      return <div>{children}</div>\n    }\n    return AuthorizedChildren()\n  }\n}\n\nexport default Authorize\n"]},"metadata":{},"sourceType":"module"}