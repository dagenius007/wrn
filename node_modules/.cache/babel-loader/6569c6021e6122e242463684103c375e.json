{"ast":null,"code":"import { all, takeEvery, put } from 'redux-saga/effects';\nimport store from 'store';\nimport qs from 'qs';\nimport { history, store as reduxStore } from 'index';\nimport actions from './actions';\nexport function* CHANGE_SETTING({\n  payload: {\n    setting,\n    value\n  }\n}) {\n  yield store.set(`app.settings.${setting}`, value);\n  yield put({\n    type: 'settings/SET_STATE',\n    payload: {\n      [setting]: value\n    }\n  });\n}\nexport function* SETUP() {\n  // load settings from url on app load\n  const changeSettings = search => {\n    const query = qs.parse(search, {\n      ignoreQueryPrefix: true\n    });\n    Object.keys(query).forEach(key => {\n      reduxStore.dispatch({\n        type: 'settings/CHANGE_SETTING',\n        payload: {\n          setting: key,\n          value: query[key] === 'true'\n        }\n      });\n    });\n  };\n\n  yield changeSettings(history.location.search);\n  yield history.listen(params => {\n    const search = params.search;\n    changeSettings(search);\n  }); // detect isMobileView setting on app load and window resize\n\n  const isMobileView = (load = false) => {\n    const currentState = global.window.innerWidth < 768;\n    const prevState = store.get('app.settings.isMobileView');\n\n    if (currentState !== prevState || load) {\n      reduxStore.dispatch({\n        type: 'settings/CHANGE_SETTING',\n        payload: {\n          setting: 'isMobileView',\n          value: currentState\n        }\n      });\n    }\n  };\n\n  yield isMobileView(true);\n  yield window.addEventListener('resize', () => {\n    isMobileView();\n  });\n}\nexport default function* rootSaga() {\n  yield all([takeEvery(actions.CHANGE_SETTING, CHANGE_SETTING), SETUP() // run once on app load to init listeners\n  ]);\n}","map":{"version":3,"sources":["/Users/joshuaoluikpe/Documents/personal/wrn/src/redux/settings/sagas.js"],"names":["all","takeEvery","put","store","qs","history","reduxStore","actions","CHANGE_SETTING","payload","setting","value","set","type","SETUP","changeSettings","search","query","parse","ignoreQueryPrefix","Object","keys","forEach","key","dispatch","location","listen","params","isMobileView","load","currentState","global","window","innerWidth","prevState","get","addEventListener","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,QAAoC,oBAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,SAASC,OAAT,EAAkBF,KAAK,IAAIG,UAA3B,QAA6C,OAA7C;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,UAAUC,cAAV,CAAyB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX;AAAX,CAAzB,EAA0D;AAC/D,QAAMR,KAAK,CAACS,GAAN,CAAW,gBAAeF,OAAQ,EAAlC,EAAqCC,KAArC,CAAN;AACA,QAAMT,GAAG,CAAC;AACRW,IAAAA,IAAI,EAAE,oBADE;AAERJ,IAAAA,OAAO,EAAE;AACP,OAACC,OAAD,GAAWC;AADJ;AAFD,GAAD,CAAT;AAMD;AAED,OAAO,UAAUG,KAAV,GAAkB;AACvB;AACA,QAAMC,cAAc,GAAGC,MAAM,IAAI;AAC/B,UAAMC,KAAK,GAAGb,EAAE,CAACc,KAAH,CAASF,MAAT,EAAiB;AAAEG,MAAAA,iBAAiB,EAAE;AAArB,KAAjB,CAAd;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,OAAnB,CAA2BC,GAAG,IAAI;AAChCjB,MAAAA,UAAU,CAACkB,QAAX,CAAoB;AAClBX,QAAAA,IAAI,EAAE,yBADY;AAElBJ,QAAAA,OAAO,EAAE;AACPC,UAAAA,OAAO,EAAEa,GADF;AAEPZ,UAAAA,KAAK,EAAEM,KAAK,CAACM,GAAD,CAAL,KAAe;AAFf;AAFS,OAApB;AAOD,KARD;AASD,GAXD;;AAYA,QAAMR,cAAc,CAACV,OAAO,CAACoB,QAAR,CAAiBT,MAAlB,CAApB;AACA,QAAMX,OAAO,CAACqB,MAAR,CAAeC,MAAM,IAAI;AAAA,UACrBX,MADqB,GACVW,MADU,CACrBX,MADqB;AAE7BD,IAAAA,cAAc,CAACC,MAAD,CAAd;AACD,GAHK,CAAN,CAfuB,CAoBvB;;AACA,QAAMY,YAAY,GAAG,CAACC,IAAI,GAAG,KAAR,KAAkB;AACrC,UAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAcC,UAAd,GAA2B,GAAhD;AACA,UAAMC,SAAS,GAAG/B,KAAK,CAACgC,GAAN,CAAU,2BAAV,CAAlB;;AACA,QAAIL,YAAY,KAAKI,SAAjB,IAA8BL,IAAlC,EAAwC;AACtCvB,MAAAA,UAAU,CAACkB,QAAX,CAAoB;AAClBX,QAAAA,IAAI,EAAE,yBADY;AAElBJ,QAAAA,OAAO,EAAE;AACPC,UAAAA,OAAO,EAAE,cADF;AAEPC,UAAAA,KAAK,EAAEmB;AAFA;AAFS,OAApB;AAOD;AACF,GAZD;;AAaA,QAAMF,YAAY,CAAC,IAAD,CAAlB;AACA,QAAMI,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;AAC5CR,IAAAA,YAAY;AACb,GAFK,CAAN;AAGD;AAED,eAAe,UAAUS,QAAV,GAAqB;AAClC,QAAMrC,GAAG,CAAC,CACRC,SAAS,CAACM,OAAO,CAACC,cAAT,EAAyBA,cAAzB,CADD,EAERM,KAAK,EAFG,CAEC;AAFD,GAAD,CAAT;AAID","sourcesContent":["import { all, takeEvery, put } from 'redux-saga/effects'\nimport store from 'store'\nimport qs from 'qs'\nimport { history, store as reduxStore } from 'index'\nimport actions from './actions'\n\nexport function* CHANGE_SETTING({ payload: { setting, value } }) {\n  yield store.set(`app.settings.${setting}`, value)\n  yield put({\n    type: 'settings/SET_STATE',\n    payload: {\n      [setting]: value,\n    },\n  })\n}\n\nexport function* SETUP() {\n  // load settings from url on app load\n  const changeSettings = search => {\n    const query = qs.parse(search, { ignoreQueryPrefix: true })\n    Object.keys(query).forEach(key => {\n      reduxStore.dispatch({\n        type: 'settings/CHANGE_SETTING',\n        payload: {\n          setting: key,\n          value: query[key] === 'true',\n        },\n      })\n    })\n  }\n  yield changeSettings(history.location.search)\n  yield history.listen(params => {\n    const { search } = params\n    changeSettings(search)\n  })\n\n  // detect isMobileView setting on app load and window resize\n  const isMobileView = (load = false) => {\n    const currentState = global.window.innerWidth < 768\n    const prevState = store.get('app.settings.isMobileView')\n    if (currentState !== prevState || load) {\n      reduxStore.dispatch({\n        type: 'settings/CHANGE_SETTING',\n        payload: {\n          setting: 'isMobileView',\n          value: currentState,\n        },\n      })\n    }\n  }\n  yield isMobileView(true)\n  yield window.addEventListener('resize', () => {\n    isMobileView()\n  })\n}\n\nexport default function* rootSaga() {\n  yield all([\n    takeEvery(actions.CHANGE_SETTING, CHANGE_SETTING),\n    SETUP(), // run once on app load to init listeners\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}