{"ast":null,"code":"import \"antd/es/switch/style\";\nimport _Switch from \"antd/es/switch\";\n\nvar _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"/Users/joshuaoluikpe/Documents/personal/wrn/src/components/LayoutComponents/Settings/index.js\";\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport styles from './style.module.scss';\n\nconst mapStateToProps = ({\n  settings\n}) => ({\n  settings\n});\n\nlet Settings = (_dec = connect(mapStateToProps), _dec(_class = (_temp = class Settings extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.changeSetting = (setting, value) => {\n      const dispatch = this.props.dispatch;\n      dispatch({\n        type: 'settings/CHANGE_SETTING',\n        payload: {\n          setting,\n          value\n        }\n      });\n    };\n\n    this.closeSettings = () => {\n      const dispatch = this.props.dispatch;\n      dispatch({\n        type: 'settings/CHANGE_SETTING',\n        payload: {\n          setting: 'isSettingsOpen',\n          value: false\n        }\n      });\n    };\n  }\n\n  render() {\n    const _this$props$settings = this.props.settings,\n          isLightTheme = _this$props$settings.isLightTheme,\n          isSettingsOpen = _this$props$settings.isSettingsOpen,\n          isMenuTop = _this$props$settings.isMenuTop,\n          isMenuCollapsed = _this$props$settings.isMenuCollapsed,\n          isBorderless = _this$props$settings.isBorderless,\n          isMenuShadow = _this$props$settings.isMenuShadow,\n          isSquaredBorders = _this$props$settings.isSquaredBorders,\n          isFixedWidth = _this$props$settings.isFixedWidth;\n    return React.createElement(\"div\", {\n      className: isSettingsOpen ? `${styles.settings} ${styles.settingsOpened}` : styles.settings,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Scrollbars, {\n      style: {\n        height: '100vh'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Theme Settings\", React.createElement(\"button\", {\n      className: `${styles.close} fa fa-times`,\n      onClick: this.closeSettings,\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: styles.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"This component \\\"Settings\\\" gives possibility to construct custom blocks with any widgets, components and elements inside, like this theme settings\"), React.createElement(\"div\", {\n      className: styles.item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(_Switch, {\n      checked: isMenuTop,\n      onChange: value => {\n        this.changeSetting('isMenuTop', value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: styles.itemLabel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Menu Top (Horizontal)\")), React.createElement(\"div\", {\n      className: styles.item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(_Switch, {\n      disabled: isMenuTop,\n      checked: isMenuCollapsed && !isMenuTop,\n      onChange: value => {\n        this.changeSetting('isMenuCollapsed', value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: styles.itemLabel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Collapsed Menu\")), React.createElement(\"div\", {\n      className: styles.item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(_Switch, {\n      disabled: isMenuTop,\n      checked: isMenuShadow && !isMenuTop,\n      onChange: value => {\n        this.changeSetting('isMenuShadow', value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: styles.itemLabel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Menu Shadow\")), React.createElement(\"div\", {\n      className: styles.item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(_Switch, {\n      checked: isLightTheme,\n      onChange: value => {\n        this.changeSetting('isLightTheme', value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: styles.itemLabel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Light Theme\")), React.createElement(\"div\", {\n      className: styles.item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(_Switch, {\n      checked: isBorderless,\n      onChange: value => {\n        this.changeSetting('isBorderless', value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: styles.itemLabel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Borderless Cards\")), React.createElement(\"div\", {\n      className: styles.item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(_Switch, {\n      checked: isSquaredBorders,\n      onChange: value => {\n        this.changeSetting('isSquaredBorders', value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: styles.itemLabel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Squared Borders\")), React.createElement(\"div\", {\n      className: styles.item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(_Switch, {\n      checked: isFixedWidth,\n      onChange: value => {\n        this.changeSetting('isFixedWidth', value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: styles.itemLabel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Fixed Width\")))));\n  }\n\n}, _temp)) || _class);\nexport default Settings;","map":{"version":3,"sources":["/Users/joshuaoluikpe/Documents/personal/wrn/src/components/LayoutComponents/Settings/index.js"],"names":["React","connect","Scrollbars","styles","mapStateToProps","settings","Settings","Component","changeSetting","setting","value","dispatch","props","type","payload","closeSettings","render","isLightTheme","isSettingsOpen","isMenuTop","isMenuCollapsed","isBorderless","isMenuShadow","isSquaredBorders","isFixedWidth","settingsOpened","height","container","title","close","description","item","itemLabel"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { Scrollbars } from 'react-custom-scrollbars'\nimport { Switch } from 'antd'\nimport styles from './style.module.scss'\n\nconst mapStateToProps = ({ settings }) => ({ settings })\n\n@connect(mapStateToProps)\nclass Settings extends React.Component {\n  changeSetting = (setting, value) => {\n    const { dispatch } = this.props\n    dispatch({\n      type: 'settings/CHANGE_SETTING',\n      payload: {\n        setting,\n        value,\n      },\n    })\n  }\n\n  closeSettings = () => {\n    const { dispatch } = this.props\n    dispatch({\n      type: 'settings/CHANGE_SETTING',\n      payload: {\n        setting: 'isSettingsOpen',\n        value: false,\n      },\n    })\n  }\n\n  render() {\n    const {\n      settings: {\n        isLightTheme,\n        isSettingsOpen,\n        isMenuTop,\n        isMenuCollapsed,\n        isBorderless,\n        isMenuShadow,\n        isSquaredBorders,\n        isFixedWidth,\n      },\n    } = this.props\n\n    return (\n      <div\n        className={isSettingsOpen ? `${styles.settings} ${styles.settingsOpened}` : styles.settings}\n      >\n        <Scrollbars style={{ height: '100vh' }}>\n          <div className={styles.container}>\n            <div className={styles.title}>\n              Theme Settings\n              <button\n                className={`${styles.close} fa fa-times`}\n                onClick={this.closeSettings}\n                type=\"button\"\n              />\n            </div>\n            <div className={styles.description}>\n              This component &quot;Settings&quot; gives possibility to construct custom blocks with\n              any widgets, components and elements inside, like this theme settings\n            </div>\n            <div className={styles.item}>\n              <Switch\n                checked={isMenuTop}\n                onChange={value => {\n                  this.changeSetting('isMenuTop', value)\n                }}\n              />\n              <span className={styles.itemLabel}>Menu Top (Horizontal)</span>\n            </div>\n            <div className={styles.item}>\n              <Switch\n                disabled={isMenuTop}\n                checked={isMenuCollapsed && !isMenuTop}\n                onChange={value => {\n                  this.changeSetting('isMenuCollapsed', value)\n                }}\n              />\n              <span className={styles.itemLabel}>Collapsed Menu</span>\n            </div>\n            <div className={styles.item}>\n              <Switch\n                disabled={isMenuTop}\n                checked={isMenuShadow && !isMenuTop}\n                onChange={value => {\n                  this.changeSetting('isMenuShadow', value)\n                }}\n              />\n              <span className={styles.itemLabel}>Menu Shadow</span>\n            </div>\n            <div className={styles.item}>\n              <Switch\n                checked={isLightTheme}\n                onChange={value => {\n                  this.changeSetting('isLightTheme', value)\n                }}\n              />\n              <span className={styles.itemLabel}>Light Theme</span>\n            </div>\n            <div className={styles.item}>\n              <Switch\n                checked={isBorderless}\n                onChange={value => {\n                  this.changeSetting('isBorderless', value)\n                }}\n              />\n              <span className={styles.itemLabel}>Borderless Cards</span>\n            </div>\n            <div className={styles.item}>\n              <Switch\n                checked={isSquaredBorders}\n                onChange={value => {\n                  this.changeSetting('isSquaredBorders', value)\n                }}\n              />\n              <span className={styles.itemLabel}>Squared Borders</span>\n            </div>\n            <div className={styles.item}>\n              <Switch\n                checked={isFixedWidth}\n                onChange={value => {\n                  this.changeSetting('isFixedWidth', value)\n                }}\n              />\n              <span className={styles.itemLabel}>Fixed Width</span>\n            </div>\n          </div>\n        </Scrollbars>\n      </div>\n    )\n  }\n}\n\nexport default Settings\n"]},"metadata":{},"sourceType":"module"}